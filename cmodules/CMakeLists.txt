cmake_minimum_required(VERSION 2.8.8)
# suppress the warning for "install" target
if(CMAKE_MAJOR_VERSION EQUAL 3)
	cmake_policy(SET CMP0037 OLD)
endif()
project(MDP)
set (MDP_VERSION_MAJOR 1)
set (MDP_VERSION_MINOR 0)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/")
include("${MDP_SOURCE_DIR}/cmake/mdpUtils.cmake")
option(WITH_MTF "Enable MTF based visualization" ON)
option(WITH_CUDA "Enable CUDA version of LK" ON)

if (WIN32)
	set(EIGEN_INCLUDE_DIR_WIN "C:/Eigen/include" CACHE PATH "Eigen header directory")
	set(OPENCV_INCLUDE_DIR_WIN "C:/OpenCV/build/include" CACHE PATH "OpenCV header directory")
	set(OPENCV_LIB_DIR_WIN "C:/OpenCV/build/x86/vc14/lib" CACHE PATH "OpenCV library directory")
	set(OpenCV_SUFFIX "2410" CACHE STRING "OpenCV Suffix")
	
	# find_package(Eigen3 3.2.10)
	# if(NOT EIGEN3_FOUND)
		# set(EIGEN3_INCLUDE_DIR "${EIGEN_INCLUDE_DIR_WIN}")
	# endif()
	set(OpenCV_COMPONENTS calib3d contrib core features2d flann gpu highgui imgproc legacy ml nonfree objdetect ocl photo stitching superres video videostab)
	find_package(OpenCV)
	if(NOT OpenCV_FOUND)
		set(OpenCV_INCLUDE_DIRS "${OPENCV_INCLUDE_DIR_WIN}")
		set(OpenCV_LIBRARY_DIR "${OPENCV_LIB_DIR_WIN}")
		addPrefixAndSuffix("${OpenCV_COMPONENTS}" "${OpenCV_LIBRARY_DIR}/opencv_" "${OpenCV_SUFFIX}.lib" OpenCV_LIBS)
	endif()
	set(DEFINITION_SWITCH "/D")
	set(INCLUDE_SWITCH "/I")
	set(LINK_SWITCH "/l")
else()
	find_package(Eigen3 REQUIRED)
	set( OpenCV_FOUND 1 )
	find_package(OpenCV REQUIRED)
	# if(NOT OpenCV_FOUND)
		# set( OpenCV_FOUND 1 )
		# find_package(OpenCV REQUIRED)
	# endif()
endif()


message(STATUS "Getting Eigen headers from: ${EIGEN3_INCLUDE_DIR}")
message(STATUS "Getting OpenCV headers from: ${OpenCV_INCLUDE_DIRS}")
# message(STATUS "Getting OpenCV libraries from: ${OpenCV_LIBRARY_DIRS}")
message(STATUS "Using OpenCV libraries: ${OpenCV_LIBS}")

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()
if (WIN32)
	set(MDP_LIB_INSTALL_DIR_DEFAULT C:/MDP/lib)
	set(MDP_HEADER_INSTALL_DIR_DEFAULT  C:/MDP/include)
	set(MDP_PY_INSTALL_DIR_DEFAULT C:/Python35/Lib/site-packages)
else()
	set(MDP_LIB_INSTALL_DIR_DEFAULT /usr/local/lib)
	set(MDP_HEADER_INSTALL_DIR_DEFAULT  /usr/local/include)
	set(MDP_PY_INSTALL_DIR_DEFAULT /usr/local/lib/python3.5/dist-packages)
endif()
set(PY_VER 3.5 CACHE STRING "Python version for which to build")
set(MDP_LIB_INSTALL_DIR ${MDP_LIB_INSTALL_DIR_DEFAULT} CACHE PATH "Directory to install the library")
set(MDP_HEADER_INSTALL_DIR ${MDP_HEADER_INSTALL_DIR_DEFAULT} CACHE PATH "Directory to install the header")
set(MDP_PY_INSTALL_DIR ${MDP_PY_INSTALL_DIR_DEFAULT} CACHE PATH "Directory to install the Python interface module") 

set(MDP_LIBS ${OpenCV_LIBS})
set(MDP_EXT_INCLUDE_DIRS ${OpenCV_INCLUDE_DIRS} ${EIGEN3_INCLUDE_DIR})

if(WITH_MTF)
	find_package(MTF)
	if(MTF_FOUND)	
		set(MDP_LIBS ${MDP_LIBS} ${MTF_LIBRARIES})
		set(MDP_EXT_INCLUDE_DIRS ${MDP_EXT_INCLUDE_DIRS} ${MTF_INCLUDE_DIRS})
	else(MTF_FOUND)
		set(MDP_DEFINITIONS ${MDP_DEFINITIONS} MTF_NOT_AVAILABLE)
	endif(MTF_FOUND)
else(WITH_MTF)
	set(MDP_DEFINITIONS ${MDP_DEFINITIONS} MTF_NOT_AVAILABLE)
endif(WITH_MTF)

if (WIN32)
	set(MDP_COMPILETIME_FLAGS /bigobj /arch:SSE2)
	option(WITH_FAST_FP "Enable fast floating point operations optimization in Visual C++" ON)
	if(WITH_FAST_FP)
		set(MDP_COMPILETIME_FLAGS ${MDP_COMPILETIME_FLAGS} /fp:fast)
	endif()
	option(WITH_FULL_OPTIMIZATION "Enable full optimization in Visual C++" OFF)
	if(WITH_FULL_OPTIMIZATION)
		set(CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} /Ox)
	endif()
	# set(WARNING_FLAGS /W4)
else()
	set(WARNING_FLAGS -Wfatal-errors -Wno-write-strings -Wno-unused-result -Wformat=0)
	set(MDP_COMPILETIME_FLAGS -std=c++11)
endif()
set(MDP_DEFINITIONS ${MDP_DEFINITIONS} NDEBUG EIGEN_NO_DEBUG)
# set(MDP_COMPILETIME_FLAGS ${MDP_COMPILETIME_FLAGS} ${HEADER_DEF_SWITCH}NDEBUG ${HEADER_DEF_SWITCH}EIGEN_NO_DEBUG)
set(MDP_RUNTIME_FLAGS ${WARNING_FLAGS} ${MDP_COMPILETIME_FLAGS})

message(STATUS "MDP_COMPILETIME_FLAGS: ${MDP_COMPILETIME_FLAGS}")
message(STATUS "MDP_RUNTIME_FLAGS: ${MDP_RUNTIME_FLAGS}")
message(STATUS "MDP_DEFINITIIIONS: ${MDP_DEFINITIONS}")
message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")

find_package(PythonLibs ${PY_VER})
find_package(PythonInterp ${PY_VER})
find_package(NumPy)
if(PYTHONLIBS_FOUND AND PYTHON_NUMPY_FOUND)
	message(STATUS "PYTHON_LIBRARY: ${PYTHON_LIBRARY}")
	message(STATUS "PYTHON_INCLUDE_DIR: ${PYTHON_INCLUDE_DIR}")
	message(STATUS "PYTHON_EXECUTABLE: ${PYTHON_EXECUTABLE}")
	
	execute_process (COMMAND ${PYTHON_EXECUTABLE} -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())" OUTPUT_VARIABLE MDP_PY_INSTALL_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)
	
	message(STATUS "MDP_PY_INSTALL_DIR: ${MDP_PY_INSTALL_DIR}")

	# if(PYTHONLIBS_VERSION_STRING VERSION_LESS 3.0.0)
		add_library(pyLK MODULE pyLK.cc)
		set_target_properties(pyLK PROPERTIES PREFIX "")
		if(WIN32)
			set_target_properties(pyLK PROPERTIES SUFFIX ".pyd")
		endif()
		target_compile_definitions(pyLK PUBLIC ${MDP_DEFINITIONS})
		target_compile_options(pyLK PUBLIC ${MDP_RUNTIME_FLAGS} ${MDP_COMPILETIME_FLAGS})
		target_include_directories(pyLK PUBLIC ${MDP_INCLUDE_DIRS} ${MDP_EXT_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS} ${PYTHON_NUMPY_INCLUDE_DIR})
		target_link_libraries(pyLK ${MDP_LIBS} ${PYTHON_LIBRARIES} ${PYTHON_LIBS})	
		install(TARGETS pyLK LIBRARY DESTINATION ${MDP_PY_INSTALL_DIR} COMPONENT _pyLK_)
		add_custom_target(_pyLK_ DEPENDS pyLK)
		set(EX_TARGET_NAMES ${EX_TARGET_NAMES} pyLK)
		
		if(WITH_CUDA)
			if(OpenCV_CUDA_VERSION)
				add_library(pyLKGPU MODULE pyLKGPU.cc)
				set_target_properties(pyLKGPU PROPERTIES PREFIX "")
				if(WIN32)
					set_target_properties(pyLKGPU PROPERTIES SUFFIX ".pyd")
				endif()
				target_compile_definitions(pyLKGPU PUBLIC ${MDP_DEFINITIONS})
				target_compile_options(pyLKGPU PUBLIC ${MDP_RUNTIME_FLAGS} ${MDP_COMPILETIME_FLAGS})
				target_include_directories(pyLKGPU PUBLIC ${MDP_INCLUDE_DIRS} ${MDP_EXT_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS} ${PYTHON_NUMPY_INCLUDE_DIR})
				target_link_libraries(pyLKGPU ${MDP_LIBS} ${PYTHON_LIBRARIES} ${PYTHON_LIBS})	
				install(TARGETS pyLKGPU LIBRARY DESTINATION ${MDP_PY_INSTALL_DIR} COMPONENT _pyLKGPU_)
				add_custom_target(_pyLKGPU_ DEPENDS pyLKGPU)
				set(EX_TARGET_NAMES ${EX_TARGET_NAMES} pyLKGPU)
			else(OpenCV_CUDA_VERSION)
				message(STATUS "OpenCV has not been compiled with CUDA support so CUDA version of LK is disabled")
			endif(OpenCV_CUDA_VERSION)
		else(WITH_CUDA)
			message(STATUS "CUDA version of LK is disabled")
		endif(WITH_CUDA)
		
		add_library(pyWarp MODULE pyWarp.cc)
		set_target_properties(pyWarp PROPERTIES PREFIX "")
		if(WIN32)
			set_target_properties(pyWarp PROPERTIES SUFFIX ".pyd")
		endif()
		target_compile_definitions(pyWarp PUBLIC ${MDP_DEFINITIONS})
		target_compile_options(pyWarp PUBLIC ${MDP_RUNTIME_FLAGS} ${MDP_COMPILETIME_FLAGS})
		target_include_directories(pyWarp PUBLIC ${MDP_INCLUDE_DIRS} ${MDP_EXT_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS} ${PYTHON_NUMPY_INCLUDE_DIR})
		target_link_libraries(pyWarp ${MDP_LIBS} ${PYTHON_LIBRARIES} ${PYTHON_LIBS})	
		install(TARGETS pyWarp LIBRARY DESTINATION ${MDP_PY_INSTALL_DIR} COMPONENT _pyWarp_)
		add_custom_target(_pyWarp_ DEPENDS pyWarp)
		set(EX_TARGET_NAMES ${EX_TARGET_NAMES} pyWarp)
		
		add_library(pyDist MODULE pyDist.cc)
		set_target_properties(pyDist PROPERTIES PREFIX "")
		if(WIN32)
			set_target_properties(pyDist PROPERTIES SUFFIX ".pyd")
		endif()
		target_compile_definitions(pyDist PUBLIC ${MDP_DEFINITIONS})
		target_compile_options(pyDist PUBLIC ${MDP_RUNTIME_FLAGS} ${MDP_COMPILETIME_FLAGS})
		target_include_directories(pyDist PUBLIC ${MDP_INCLUDE_DIRS} ${MDP_EXT_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS} ${PYTHON_NUMPY_INCLUDE_DIR})
		target_link_libraries(pyDist ${MDP_LIBS} ${PYTHON_LIBRARIES} ${PYTHON_LIBS})	
		install(TARGETS pyDist LIBRARY DESTINATION ${MDP_PY_INSTALL_DIR} COMPONENT _pyDist_)
		add_custom_target(_pyDist_ DEPENDS pyDist)
		set(EX_TARGET_NAMES ${EX_TARGET_NAMES} pyDist)
		
		add_library(pyHungarian MODULE pyHungarian.cc)
		set_target_properties(pyHungarian PROPERTIES PREFIX "")
		if(WIN32)
			set_target_properties(pyHungarian PROPERTIES SUFFIX ".pyd")
		endif()
		target_compile_definitions(pyHungarian PUBLIC ${MDP_DEFINITIONS})
		target_compile_options(pyHungarian PUBLIC ${MDP_RUNTIME_FLAGS} ${MDP_COMPILETIME_FLAGS})
		target_include_directories(pyHungarian PUBLIC ${MDP_INCLUDE_DIRS} ${MDP_EXT_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS} ${PYTHON_NUMPY_INCLUDE_DIR})
		target_link_libraries(pyHungarian ${MDP_LIBS} ${PYTHON_LIBRARIES} ${PYTHON_LIBS})	
		install(TARGETS pyHungarian LIBRARY DESTINATION ${MDP_PY_INSTALL_DIR} COMPONENT _pyHungarian_)
		add_custom_target(_pyHungarian_ DEPENDS pyHungarian)
		set(EX_TARGET_NAMES ${EX_TARGET_NAMES} pyHungarian)
	# else()
		# message(STATUS "Incompatible version of Python library found so pyMDP is disabled: " ${PYTHONLIBS_VERSION_STRING})
	# endif()		
else()
	message(STATUS "Python and/or Numpy not found so pyMDP is disabled")
endif()